" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------

set nocompatible               " Don't make vim vi-compatibile

syntax on                      " Enable syntax highlighting

if has('autocmd')
    filetype plugin indent on
    "           │     │    └──── Enable file type detection
    "           │     └───────── Enable loading of indent file
    "           └─────────────── Enable loading of plugin files
endif

set autoindent                 " Copy indent to the new line

set backspace=indent           " ┐
set backspace+=eol             " │ Allow `backspace`
set backspace+=start           " ┘ in insert mode

set clipboard=unnamed          " ┐
                               " │ Use the system clipboard
if has('unnamedplus')          " │ as the default register
    set clipboard+=unnamedplus " │
endif                          " ┘

set cpoptions+=$               " When making a change, don't
                               " redisplay the line, and instead,
                               " put a `$` sign at the end of
                               " the changed text

set colorcolumn=80             " Highlight certain column(s)
set cursorline                 " Highlight the current line
set directory=~/.vim/swaps//   " Set directory for swap files
set encoding=utf-8             " Use UTF-8
set history=5000               " Increase command line history
set hlsearch                   " Enable search highlighting
set ignorecase                 " Ignore case in search patterns

set incsearch                  " Highlight search pattern as
                               " it is being typed

set laststatus=2               " Always show the status line

set list
set showbreak=↪
set listchars=tab:.\           " ┐
set listchars+=trail:·         " │
set listchars+=eol:↴           " │ Use custom symbols to
set listchars+=nbsp:_          " │ represent invisible characters
set listchars+=extends:›       " │
set listchars+=precedes:‹      " ┘

set magic                      " Enable extended regexp
set mouse=a                    " Enable mouse functions
set mousehide                  " Hide mouse pointer while typing
set noerrorbells               " Disable error bells

set nojoinspaces               " When using the join command,
                               " only insert a single space
                               " after a `.`, `?`, or `!`

set nostartofline              " Kept the cursor on the same column
set number relativenumber      " Show relative line numbers by default

set numberwidth=5              " Increase the minimal number of
                               " columns used for the `line number`

set report=0                   " Report the number of lines changed
set ruler                      " Show cursor position

set scrolloff=5                " When scrolling, keep the cursor
                               " 5 lines below the top and 5 lines
                               " above the bottom of the screen

set shortmess=aAItW            " Avoid all the hit-enter prompts
set showcmd                    " Show the command being typed

set smartcase                  " Override `ignorecase` option
                               " if the search pattern contains
                               " uppercase characters

set synmaxcol=2500             " Limit syntax highlighting (this
                               " avoids the very slow redrawing
                               " when files contain long lines)

set tabstop=2                  " ┐
set softtabstop=2              " │ Set global <TAB> settings
set shiftwidth=2               " │ http://vimcasts.org/e/2
set expandtab                  " ┘

set ttyfast                    " Enable fast terminal connection
"set virtualedit=all            " Allow cursor to be anywhere

set visualbell                 " ┐
set noerrorbells               " │ Disable beeping and window flashing
set t_vb=                      " ┘ https://vim.wikia.com/wiki/Disable_beeping

set wildmenu                   " Enable enhanced command-line
                               " completion (by hitting <TAB> in
                               " command mode, Vim will show the
                               " possible matches just above the
                               " command line with the first
                               " match highlighted)

set winminheight=0             " Allow windows to be squashed

set ttimeout
set ttimeoutlen=400            " shorter timeout
set updatetime=500             " better vim-gitgutter response

set confirm                    " Ask to save files before quitting

set hidden                     " Don't unload hidden buffers

" This mkdir snippet was based on this comment:
" https://www.reddit.com/r/vim/comments/2ib9au/_/cl1p3dq
let s:vim_swaps = expand('$HOME/.vim/swaps')
if filewritable(s:vim_swaps) == 0 && exists("*mkdir")
    call mkdir(s:vim_swaps, "p")
endif

" ----------------------------------------------------------------------
" | Plugins                                                            |
" ----------------------------------------------------------------------

" Use Plug to manage the vim plugins
" https://github.com/junegunn/vim-plug/

" Initialize Plug and specify the path
" where the plugins should be installed
call plug#begin('~/.vim/plugins')
    " PaperColor theme
    Plug 'NLKNguyen/papercolor-theme'

    " Swag
    Plug 'ryanoasis/vim-devicons'

    " Tab/buffer manager
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Git wrapper
    " Plug 'tpope/vim-fugitive'

    " Git gutter
    Plug 'airblade/vim-gitgutter'

    " Easy handling of Git merges
    " Plug 'sjl/splice.vim'

    " Session handling
    Plug 'tpope/vim-obsession'
    Plug 'dhruvasagar/vim-prosession'

    " Follow editorconfig files
    Plug 'editorconfig/editorconfig-vim'

    " Fuzzy search of files
    Plug 'ctrlpvim/ctrlp.vim'

    " Search across multiple files
    " Plug 'dyng/ctrlsf.vim'

    " Zen coding
    Plug 'mattn/emmet-vim'

    " Automatically close parenthesis and similar symbols
    Plug 'Townk/vim-autoclose'

    " Keyword completion system
    Plug 'shougo/neocomplete.vim'

    " Easier handling of comments
    Plug 'tpope/vim-commentary'

    " Tools for javascript (requires node)
    Plug 'marijnh/tern_for_vim', {'do': 'npm install'}

    " Surround text with tags, quotes, and more
    Plug 'tpope/vim-surround'

    " Highlight yanks
    Plug 'machakann/vim-highlightedyank'

    " Better repeat using `.`
    Plug 'tpope/vim-repeat'

    " Useful mappings
    Plug 'tpope/vim-unimpaired'

    " Increment/decrement dates
    Plug 'tpope/vim-speeddating'

    " Search and get information about unicode chars
    " Plug 'chrisbra/unicode.vim'

    if has('python3')
        if has('nvim')
            Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
        else
            Plug 'Shougo/deoplete.nvim'
            Plug 'roxma/nvim-yarp'
            Plug 'roxma/vim-hug-neovim-rpc'
        endif
    endif

    " -----------------------
    " | Syntax highlighting |
    " -----------------------

    " Syntax checking plugin
    Plug 'scrooloose/syntastic'

    " Language pack
    Plug 'sheerun/vim-polyglot'

    " Markdown highlighting, matching rules and mappings
    Plug 'plasticboy/vim-markdown', {'for': 'markdown'}

    " Vue.js highlighting
    " Plug 'posva/vim-vue'
    " Plug 'sekel/vim-vue-syntastic'

    " Preview CSS colors
    " Plug 'ap/vim-css-color', {'for': ['css', 'scss', 'less']}
    Plug 'lilydjwg/colorizer'

    " ledger-cli
    Plug 'ledger/vim-ledger', {'for': 'ledger'}


call plug#end()

filetype on

" ----------------------------------------------------------------------
" | Color Scheme                                                       |
" ----------------------------------------------------------------------

set t_Co=256                   " Enable full-color support
set background=dark

try
    colorscheme PaperColor
catch /^Vim\%((\a\+)\)\=:E185/
    " Color scheme not found. Normal on first run.
endtry

let g:airline_theme='cool'

" Keep Vim background transparent
" hi Normal guibg=NONE ctermbg=NONE
hi SignColumn guibg=NONE ctermbg=NONE
hi LineNr guibg=NONE ctermbg=NONE
hi NonText guibg=NONE ctermbg=NONE
" hi CursorLine guibg=NONE ctermbg=NONE


" ----------------------------------------------------------------------
" | Airline                                                            |
" ----------------------------------------------------------------------
" Show buffers as tabs
let g:airline#extensions#tabline#enabled = 1

" Show only filename in tab
let g:airline#extensions#tabline#fnamemod = ':t'

" Use powerline fonts
let g:airline_powerline_fonts = 1

" ----------------------------------------------------------------------
" | Markdown                                                           |
" ----------------------------------------------------------------------

" Disable Folding
" https://github.com/plasticboy/vim-markdown#disable-folding

let g:vim_markdown_folding_disabled=1

" ----------------------------------------------------------------------
" | CUDA                                                               |
" ----------------------------------------------------------------------

au BufNewFile,BufRead *.cu set ft=cuda
au BufNewFile,BufRead *.cuh set ft=cuda

" ----------------------------------------------------------------------
" | CtrlP                                                              |
" ----------------------------------------------------------------------

if executable('ag')
    let g:ctrlp_map = '<c-p>'
    let g:ctrlp_cmd = 'CtrlP'
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

    " Use ag instead of grep
    "set grepprg=ag\ --nogroup\ --nocolor
endif


" ----------------------------------------------------------------------
" | AutoClose                                                          |
" ----------------------------------------------------------------------

let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}


" ----------------------------------------------------------------------
" | Emmet                                                              |
" ----------------------------------------------------------------------

" let g:user_emmet_install_global = 0
" autocmd FileType html,tpl,css,sass EmmetInstall
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" ----------------------------------------------------------------------
" | Move lines                                                         |
" ----------------------------------------------------------------------
let g:move_map_keys = 0

" vmap <a-[> <Plug>MoveBlockUp
" vmap <a-]> <Plug>MoveBlockDown
" nmap <a-[> <Plug>MoveLineUp
" nmap <a-]> <Plug>MoveLineDown

" ----------------------------------------------------------------------
" | Deoplete                                                           |
" ----------------------------------------------------------------------


function! s:check_backspace() abort
    let l:column = col('.') - 1
    return !l:column || getline('.')[l:column - 1] =~ '\s'
endfunction

let g:deoplete#enable_at_startup = 1
"let g:deoplete#auto_complete = 0
call deoplete#custom#option('auto_complete', v:false)
" call deoplete#custom#set('buffer', 'min_pattern_length', 3)

" inoremap <silent><expr> <Tab>
"         \ pumvisible() ? "\<C-n>" :
"         \ <SID>check_backspace() ? "\<Tab>" :
"         \ deoplete#manual_complete()
inoremap <expr> <C-h>
        \ deoplete#smart_close_popup() . "\<C-h>"
inoremap <expr> <BS>
        \ deoplete#smart_close_popup() . "\<C-h>"
inoremap <expr> <C-g> deoplete#undo_completion()


" Make `<TAB>` autocomplete
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"


" ----------------------------------------------------------------------
" | Ledger                                                              |
" ----------------------------------------------------------------------

" Set file type and make a vertical column on line 50
au BufNewFile,BufRead *.ldg,*.ledger setf ledger | comp ledger | set colorcolumn=50

" Use `{` and `}` to jump to other transactions
au FileType ledger noremap { ?^\d<CR>
au FileType ledger noremap } /^\d<CR>

let g:ledger_align_at = 50
let g:ledger_commodity_before = 0
let g:ledger_commodity_sep = ' '
let g:ledger_default_commodity = 'ARS'
let g:ledger_date_format = '%m-%d'
let g:ledger_detailed_first = 1
let g:ledger_extra_options = '--pedantic --explicit --check-payees'
let g:ledger_maxwidth = 80

highlight LedgerNumber ctermfg=2
highlight LedgerNegativeNumber ctermfg=1

if has('autocmd')
    autocmd FileType ledger SpeedDatingFormat %m-%d
    autocmd FileType ledger setlocal sts=0 vartabstop=2,44,2
    " Go to the last line when opening a ledger file
    autocmd FileType ledger $
    autocmd FileType ledger map <leader>a :LedgerAlign<CR>
    autocmd FileType ledger vnoremap <silent> <buffer> <Tab> :LedgerAlign<CR>
    autocmd FileType ledger inoremap <silent> <Tab> <C-r>=ledger#autocomplete_and_align()<CR>

    autocmd FileType ledger inoremap <leader>l <C-R>=strftime('%m-%d')<CR> *
endif

noremap <silent><buffer> <2-LeftMouse> :call ledger#transaction_state_toggle(line('.'), '*?!')<CR>

" ----------------------------------------------------------------------
" | Syntastic                                                          |
" ----------------------------------------------------------------------

" Inform Syntastic which checkers to use based on file types

" let g:syntastic_html_checkers = [ 'jshint' ]
let g:syntastic_javascript_checkers = [ 'eslint' ]

" ----------------------------------------------------------------------
" | Highlighted yanks                                                  |
" ----------------------------------------------------------------------
"
map y <Plug>(highlightedyank)

" ----------------------------------------------------------------------
" | Automatic Commands                                                 |
" ----------------------------------------------------------------------

if has('autocmd')

    " Autocommand Groups
    " http://learnvimscriptthehardway.stevelosh.com/chapters/14.html

    augroup auto_reload_vim_configs
        autocmd!
        autocmd BufWritePost vimrc source $MYVIMRC
    augroup END

    augroup HiglightTODO
        autocmd!
        autocmd WinEnter,BufEnter * if &filetype != "ledger"
            \ | :silent! call matchadd('Todo', 'TODO\|ToDo\|Todo\|FIXME', -1)
    augroup END

    " Toggle relative line numbers depending on mode
    augroup numbertoggle
        autocmd!
        autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
        autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
    augroup END
endif

" Customize console title
autocmd BufEnter * let &titlestring = "vim (" . expand("%:t") . ")"
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term == "xterm"
  set title
endif

" ----------------------------------------------------------------------
" | Mappings                                                           |
" ----------------------------------------------------------------------

" Use a different mapleader (default is '\')
let mapleader = ','

" Keep search in the middle of the screen
nnoremap n nzzzv
nnoremap N Nzzzv

" use jk as <ESC>
ino jk <esc>l

" Enter adds blank lines without entering insert mode
map <S-Enter> O<Esc><Esc>
map <Enter> o<Esc><Esc>

" [,cc] Toggle code comments
map <leader>cc :Commentary<CR>

" [,cs] Clear search
map <leader>cs <Esc>:noh<CR>

" [,p ] Paste from clipboard
nmap <silent> <leader>p :set paste<CR>"*p:set nopaste<CR>

" [,ts] Toggle Syntastic
nmap <leader>ts :SyntasticToggleMode<CR>

" [,v ] Make the opening of the `.vimrc` file easier
nmap <leader>v :e $MYVIMRC<CR>

" [,W ] Sudo write
map <leader>W :w !sudo tee %<CR>
" [:w!!]
cnoremap w!! %!sudo tee > /dev/null %

" Open shell (return to Vim issuing Ctrl+D)
nmap <leader>` :shell<CR>

" Split line
nnoremap K i<CR><Esc>

" [F3] Opens a new file
nnoremap <F3> :enew<CR>
inoremap <F3> <Esc>:enew<CR>

" [F4] Exit
function! CloseIfLastOpenBuffer()
  if len(filter(range(1,bufnr('$')), 'buflisted(v:val)')) == 1
    q
  else
    bd
  endif
endfunction
nnoremap <F4> :call CloseIfLastOpenBuffer()<CR>
inoremap <F4> <ESC>:call CloseIfLastOpenBuffer()<CR>

" [F5] Save changes in current file
nnoremap <F5> :w<CR>
inoremap <F5> <Esc>:w<CR>

" Buffer navigation:
nnoremap <F2> :bnext<CR>
nnoremap <F1> :bprev<CR>
inoremap <F2> <ESC>:bnext<CR>
inoremap <F1> <ESC>:bprev<CR>

" Use arrows to select the active split
nnoremap <silent> <Right> <c-w>l
nnoremap <silent> <Left> <c-w>h
nnoremap <silent> <Up> <c-w>k
nnoremap <silent> <Down> <c-w>j

" Use ctrl + arrows to indent
nnoremap <silent> <C-Right> >>
nnoremap <silent> <C-Left> <<

" Relative or absolute number lines
function! NumberToggle()
    if(&rnu == 0)
        " set nu!
        set rnu
    else
        set nornu
        " set nu
    endif
endfunction

" [,n ] Toggle `set relativenumber`
nmap <leader>n :call NumberToggle()<CR>

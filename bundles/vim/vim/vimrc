" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------

set nocompatible               " Don't make vim vi-compatibile

syntax on                      " Enable syntax highlighting

if has('autocmd')
    filetype plugin indent on
    "           │     │    └──── Enable file type detection
    "           │     └───────── Enable loading of indent file
    "           └─────────────── Enable loading of plugin files
endif

set autoindent                 " Copy indent to the new line

set backspace=indent           " ┐
set backspace+=eol             " │ Allow `backspace`
set backspace+=start           " ┘ in insert mode

set clipboard=unnamed          " ┐
                               " │ Use the system clipboard
if has('unnamedplus')          " │ as the default register
    set clipboard+=unnamedplus " │
endif                          " ┘

set cpoptions+=$               " When making a change, don't
                               " redisplay the line, and instead,
                               " put a `$` sign at the end of
                               " the changed text

set colorcolumn=80             " Highlight certain column(s)
set cursorline                 " Highlight the current line
set directory=~/.vim/swaps//   " Set directory for swap files
set encoding=utf-8             " Use UTF-8
set history=5000               " Increase command line history
set hlsearch                   " Enable search highlighting
set ignorecase                 " Ignore case in search patterns

set incsearch                  " Highlight search pattern as
                               " it is being typed

set laststatus=2               " Always show the status line

set listchars=tab:▸\           " ┐
set listchars+=trail:·         " │ Use custom symbols to
set listchars+=eol:↴           " │ represent invisible characters
set listchars+=nbsp:_          " ┘

set magic                      " Enable extended regexp
set mousehide                  " Hide mouse pointer while typing
set noerrorbells               " Disable error bells

set nojoinspaces               " When using the join command,
                               " only insert a single space
                               " after a `.`, `?`, or `!`

set nostartofline              " Kept the cursor on the same column
set number                     " Show line number

set numberwidth=5              " Increase the minimal number of
                               " columns used for the `line number`

set report=0                   " Report the number of lines changed
set ruler                      " Show cursor position

set scrolloff=5                " When scrolling, keep the cursor
                               " 5 lines below the top and 5 lines
                               " above the bottom of the screen

set shortmess=aAItW            " Avoid all the hit-enter prompts
set showcmd                    " Show the command being typed
"set showmode                   " Show current mode

set smartcase                  " Override `ignorecase` option
                               " if the search pattern contains
                               " uppercase characters

set synmaxcol=2500             " Limit syntax highlighting (this
                               " avoids the very slow redrawing
                               " when files contain long lines)

set tabstop=2                  " ┐
set softtabstop=2              " │ Set global <TAB> settings
set shiftwidth=2               " │ http://vimcasts.org/e/2
set expandtab                  " ┘

set ttyfast                    " Enable fast terminal connection
"set virtualedit=all            " Allow cursor to be anywhere

set visualbell                 " ┐
set noerrorbells               " │ Disable beeping and window flashing
set t_vb=                      " ┘ https://vim.wikia.com/wiki/Disable_beeping

set wildmenu                   " Enable enhanced command-line
                               " completion (by hitting <TAB> in
                               " command mode, Vim will show the
                               " possible matches just above the
                               " command line with the first
                               " match highlighted)

set winminheight=0             " Allow windows to be squashed

set ttimeout
set ttimeoutlen=400            " shorter timeout
set updatetime=500             " better vim-gitgutter response

set confirm                    " Ask to save files before quitting

" This mkdir snippet was based on this comment:
" https://www.reddit.com/r/vim/comments/2ib9au/_/cl1p3dq
let s:vim_swaps = expand('$HOME/.vim/swaps')
if filewritable(s:vim_swaps) == 0 && exists("*mkdir")
    call mkdir(s:vim_swaps, "p")
endif

" ----------------------------------------------------------------------
" | Plugins                                                            |
" ----------------------------------------------------------------------

" Use Plug to manage the vim plugins
" https://github.com/junegunn/vim-plug/

" Initialize Plug and specify the path
" where the plugins should be installed
call plug#begin('~/.vim/plugins')
    " PaperColor theme
    Plug 'NLKNguyen/papercolor-theme'

    " Git wrapper
    Plug 'tpope/vim-fugitive'

    " Follow editorconfig files
    Plug 'editorconfig/editorconfig-vim'

    " Tools for working with javascript. Requires node.
    Plug 'marijnh/tern_for_vim', {'do': 'npm install'}

    " Markdown highlighting, matching rules and mappings
    Plug 'plasticboy/vim-markdown'

    " Easy-to-follow indentation guides
    Plug 'nathanaelkane/vim-indent-guides'

    " Syntax checking plugin for several languages
    Plug 'scrooloose/syntastic'

    " Awesome tree directories in a toggleable sidebar
    Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}

    " Fuzzy search of files
    Plug 'ctrlpvim/ctrlp.vim'

    " Zen coding
    " Plug 'mattn/emmet-vim'

    " Easier handling of comments
    Plug 'tpope/vim-commentary'

    " Enhanced JavaScript syntax
    Plug 'jelera/vim-javascript-syntax'

    " Automatic closing of parenthesis, quotes, etc.
    Plug 'raimondi/delimitmate'

    " Surround text with tags, quotes, and more.
    Plug 'tpope/vim-surround'

    " Git gutter
    Plug 'airblade/vim-gitgutter'

    " Swag
    Plug 'ryanoasis/vim-devicons'

    " Search across multiple files
    Plug 'dyng/ctrlsf.vim'

    " Multiple cursors
    Plug 'terryma/vim-multiple-cursors'

    " Better repeat using .
    Plug 'tpope/vim-repeat'

    " Easy handling of Git merges
    Plug 'sjl/splice.vim'

    " Tab/buffer manager
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " Useful mappings
    Plug 'tpope/vim-unimpaired'

    " Docker syntax highlighting
    Plug 'ekalinin/Dockerfile.vim', {'for': 'Dockerfile'}

    " Jinja2 templates syntax
    Plug 'Glench/Vim-Jinja2-Syntax', {'for': 'jinja2'}

    " Golang support
    Plug 'fatih/vim-go'

    " Session handling
    Plug 'tpope/vim-obsession'
    Plug 'dhruvasagar/vim-prosession'

    " ------------
    " | Disabled |
    " ------------

    " Keyword completion system
    " Plug 'shougo/neocomplete.vim'

    " Preview CSS colors
    " Plug 'ap/vim-css-color'

    " Search and get information about unicode chars
    " Plug 'chrisbra/unicode.vim'

    " Autocomplete, indentation and syntax for HTML5
    " Plug 'othree/html5.vim'


call plug#end()

filetype on

" ----------------------------------------------------------------------
" | Color Scheme                                                       |
" ----------------------------------------------------------------------

set t_Co=256                   " Enable full-color support
set background=dark

try
    colorscheme PaperColor
catch /^Vim\%((\a\+)\)\=:E185/
    " Color scheme not found. Normal on first run.
endtry

let g:airline_theme='papercolor'

" ----------------------------------------------------------------------
" | Airline                                                            |
" ----------------------------------------------------------------------
" Show buffers as tabs
let g:airline#extensions#tabline#enabled = 1

" Show only filename in tab
let g:airline#extensions#tabline#fnamemod = ':t'

" Use powerline fonts
let g:airline_powerline_fonts = 1

" ----------------------------------------------------------------------
" | Markdown                                                           |
" ----------------------------------------------------------------------

" Disable Folding
" https://github.com/plasticboy/vim-markdown#disable-folding

let g:vim_markdown_folding_disabled=1

" ----------------------------------------------------------------------
" | CUDA                                                               |
" ----------------------------------------------------------------------

au BufNewFile,BufRead *.cu set ft=cuda
au BufNewFile,BufRead *.cuh set ft=cuda

" ----------------------------------------------------------------------
" | NERDTree                                                           |
" ----------------------------------------------------------------------

nmap \ :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore = ['node_modules', 'bower_components']

" ----------------------------------------------------------------------
" | CtrlP                                                              |
" ----------------------------------------------------------------------

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" ----------------------------------------------------------------------
" | CtrlSF                                                             |
" ----------------------------------------------------------------------

let g:ctrlsf_ackprg = 'ag'

" ----------------------------------------------------------------------
" | Emmet                                                              |
" ----------------------------------------------------------------------
" imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" ----------------------------------------------------------------------
" | Neocomplete                                                        |
" ----------------------------------------------------------------------

" Enable `neocomplcache` by default
"let g:neocomplete#enable_at_startup=1

" Make `<TAB>` autocomplete
"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"


" ----------------------------------------------------------------------
" | Syntastic                                                          |
" ----------------------------------------------------------------------

" Inform Syntastic which checkers to use based on file types

let g:syntastic_html_checkers = [ 'jshint' ]
let g:syntastic_javascript_checkers = [ 'jshint' ]

" ----------------------------------------------------------------------
" | Automatic Commands                                                 |
" ----------------------------------------------------------------------

if has('autocmd')

    " Autocommand Groups
    " http://learnvimscriptthehardway.stevelosh.com/chapters/14.html

    augroup auto_reload_vim_configs
        autocmd!
        autocmd BufWritePost vimrc source $MYVIMRC
    augroup END

    augroup HiglightTODO
        autocmd!
        autocmd WinEnter,VimEnter * :silent! call matchadd('Todo', 'TODO\|ToDo\|Todo\|FIXME', -1)
    augroup END

endif

" Customize console title
autocmd BufEnter * let &titlestring = "vim (" . expand("%:t") . ")"
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term == "xterm"
  set title
endif

" ----------------------------------------------------------------------
" | Mappings                                                           |
" ----------------------------------------------------------------------

" Use a different mapleader (default is '\')
let mapleader = ','

" Invert : and ;
noremap ; :

" Keep search in the middle of the screen
nnoremap n nzzzv
nnoremap N Nzzzv

" use jk as <ESC>
ino jk <esc>l

" [,cc] Toggle code comments
map <leader>cc :Commentary<CR>

" [,cs] Clear search
map <leader>cs <Esc>:noh<CR>

" [,ti] Toggle indent
nmap <leader>ti <Plug>IndentGuidesToggle

" [,ts] Toggle Syntastic
nmap <leader>ts :SyntasticToggleMode<CR>

" [,v ] Make the opening of the `.vimrc` file easier
nmap <leader>v :e $MYVIMRC<CR>

" [,W ] Sudo write
map <leader>W :w !sudo tee %<CR>
" [:w!!]
cnoremap w!! %!sudo tee > /dev/null %

" Open shell (return to Vim issuing Ctrl+D)
nmap <leader>` :shell<CR>

" Split line
nnoremap K i<CR><Esc>

" [F4] Close buffer or exit if last buffer
nnoremap <F4> :call CloseIfLastBuffer()<CR>
inoremap <F4> <ESC>:call CloseIfLastBuffer()<CR>
function! CloseIfLastBuffer()
  if ((len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1) && expand('%') == '')
    quit
  else
    :bd
  endif
endfunction

" [F5] Save changes
nnoremap <F5> :w<CR>
inoremap <F5> <Esc>:w<CR>

" Buffer navigation:
" I'm currently testing which shortcuts works best for me
nnoremap <C-tab> :bnext<CR>
nnoremap <C-S-tab> :bprev<CR>
inoremap <C-tab> <Esc>:bnext<CR>
inoremap <C-S-tab> <Esc>:bprev<CR>

nnoremap <F2> :bnext<CR>
nnoremap <F1> :bprev<CR>
inoremap <F2> :bnext<CR>
inoremap <F1> :bprev<CR>

" Use arrows to select the active split
nnoremap <silent> <Right> <c-w>l
nnoremap <silent> <Left> <c-w>h
nnoremap <silent> <Up> <c-w>k
nnoremap <silent> <Down> <c-w>j

" Use ctrl + arrows to indent or move lines around
nnoremap <silent> <C-Right> >>
nnoremap <silent> <C-Left> <<
nnoremap <silent> <C-Up> [e
nnoremap <silent> <C-Down> ]e

" Relative or absolute number lines
function! NumberToggle()
    if(&rnu == 0)
        " set nu!
        set rnu
    else
        set nornu
        " set nu
    endif
endfunction

" [,n ] Toggle `set relativenumber`
nmap <leader>n :call NumberToggle()<CR>

" CtrlSF mappings
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

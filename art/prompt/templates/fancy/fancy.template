#!/bin/bash

completely_dynamic_prompt() {
    {~ time_for_long_commands ~}
    # Mark time to calculate execution time of the last process
    PROMPT_FINISH_TIME=$(date +'%s')
    {~ /time_for_long_commands ~}

    ######################
    # Measure terminal ##
    ####################

    local used_chars=0

    # Use tput to get the correct size inside tmux panes.
    # Otherwise, you can use stty to get the real size:
    #   `read rows cols < <(stty size)`
    read cols < <(tput cols)

    # At this point we need to know if we are using Git to calculate console size
    # This checks if the current directory is a Git repository
    # but not in `.git/` directory (some of the checks won't work in there)
    [[ ("$(git rev-parse &>/dev/null; printf $?)" -eq 0) && ("$(git rev-parse --is-inside-git-dir)" == "false") ]]
    local inside_repo=$?

    if [ ${inside_repo} -eq 0 ]; then
        local branchName="$( printf "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
            || git rev-parse --short HEAD 2> /dev/null \
            || printf " (unknown)" )" | tr -d "\n" )"

        # branch name + branch icon + 2 chars for each status icon (assume worst case) + spaces
        used_chars=$(( $used_chars + ${#branchName} + 3 + 6 + 2 ))
    fi

    local max_path_length=$(( $cols - $used_chars - 5 ))

    ####################
    # Terminal title ##
    ##################

    PS1="\[\033]0;"
    # Add hostname in caps when connected via SSH
    if [ -n "$SSH_CONNECTION" ] && [ -n "$HOSTNAME" ]; then
        PS1+="${HOSTNAME^^}: "
    fi
    # Add cwd (\w)
    PS1+="\w\007\]"

    {~ show_battery_level ~}
    ###################
    # Battery block ##
    #################

    # Get battery capacity, check if AC is plugged
    {~ IS_LINUX ~}
    local power_supply_capacity="$(cat /sys/class/power_supply/BAT0/capacity)"
    local power_ac_online="$(cat /sys/class/power_supply/AC/online)"
    {~ /IS_LINUX ~}
    {~ IS_MAC ~}
    read -r power_ac_online power_supply_capacity <<<$(pmset -g batt|awk 'NR==1{print ($0 ~ /AC Power/);next}{sub(/%;.*/,"");print}'|grep -o -E "[0-9]+$")
    {~ /IS_MAC ~}

    if [ $power_ac_online -lt 1 ] || [ $power_supply_capacity -lt 99 ]; then
        local batt_icons=""
        local batt_icon_index=11
        local batt_bg=""
        local batt_blink=""

        case "$power_supply_capacity" in
            100|9[6-9]) batt_bg="22";  batt_icon_index=10 ;;
            9[0-5])     batt_bg="22";  batt_icon_index=9 ;;
            8[0-9])     batt_bg="22";  batt_icon_index=8 ;;
            7[0-9])     batt_bg="64";  batt_icon_index=7 ;;
            6[0-9])     batt_bg="64";  batt_icon_index=6 ;;
            5[0-9])     batt_bg="94"; batt_icon_index=5 ;;
            4[0-9])     batt_bg="94"; batt_icon_index=4 ;;
            3[0-9])     batt_bg="130"; batt_icon_index=3 ;;
            2[0-9])     batt_bg="130"; batt_icon_index=2 ;;
            1[0-9])     batt_bg="124"; batt_icon_index=1; batt_blink="\e[5m" ;;
            [0-9])      batt_bg="124"; batt_icon_index=0; batt_blink="\e[5m" ;;
        esac
        # Set bg+fg color, add corresponding icon
        PS1+="\e[48;5;${batt_bg}m\e[97m ${batt_blink}${batt_icons:$batt_icon_index:1}${batt_blink/5/25}"
        # Add AC icon if connected
        [ $power_ac_online -ge 1 ] && PS1+="⚡"
        # Percentage value
        PS1+=" ${power_supply_capacity}%"
        # Closing arrow
        PS1+=" \[\e[38;5;${batt_bg}m\]{{ colors.user_bg }}"
    fi
    {~ /show_battery_level ~}

    ################
    # User block ##
    ##############

    # Username
    # Reset, set username background color
    PS1+="\[\e[0m\]{{ colors.user_bg }}"

    # Show user icon only if not going through a SSH connection
    # because I don't want my prompt to be an icon parade
    if [ -z "$SSH_CONNECTION" ]; then
      PS1+="{{ colors.user_symbol_fg }} {{ symbol.user }} {{ colors.user_fg }}"
    else
      PS1+=" {{ colors.ssh_user_fg }}"
    fi
    # Print username
    PS1+="{{ strings.username }} "

    # username (assume "\u") + icon + space around
    used_chars=$(( $used_chars + ${#USER} + 5 ))

    # Hostname
    {~ hide_hostname_locally ~}if [ -n "$SSH_CONNECTION" ]; then{~ /hide_hostname_locally ~}
        # Show hostname only when connected through SSH
        # Set color, print symbol
        PS1+="{{ colors.hostname_symbol_fg }}{{ symbol.ssh }} "
        # Set bold, print hostname
        PS1+="\[\e[1m\]{{ colors.hostname_fg }}{{ strings.hostname }} "
        used_chars=$(( $used_chars + ${#HOSTNAME} ))
    {~ hide_hostname_locally ~}fi{~ /hide_hostname_locally ~}

    # Reset, set color, set background color for path, print closing section
    PS1+="\[\e[0m\]{{ fg(colors.user_bg) }}{{ colors.path_bg }} "

    {~ time_for_long_commands ~}
    ##################
    # Timing block ##
    ################

    if [ -n "$PROMPT_START_TIME" ]; then
        TIMIMG_FOR_LAST_COMMAND=$(( PROMPT_FINISH_TIME - PROMPT_START_TIME ))
        if [ ${TIMIMG_FOR_LAST_COMMAND} -gt {{ options.seconds_to_consider_long_time }} ]; then
            PS1+="{{ fg(colors.timing_fg) }}{{symbol.timing}}$(format_small_time ${TIMIMG_FOR_LAST_COMMAND})  "
            command -v beep &>/dev/null && beep
        fi
        unset PROMPT_START_TIME
    fi
    {~ /time_for_long_commands ~}

    ################
    # Path block ##
    ##############

    # Initialize the path resetting bold and re-adding background color
    local path_block_string='\[\e[0m\]{{ colors.path_bg }}'

    if [[ "$PWD" == "$HOME" ]]; then
        # We are home. Piece of cake. Print a nice little house and get out.
        path_block_string+='{{ colors.path_home_fg }}{{ symbol.home }} '

    elif [[ "$PWD" == "/tmp" ]]; then
        # Print a fancy trash can and call it a day.
        path_block_string+='{{ colors.path_tmp_fg }}{{ symbol.tmp }} '

    else # This isn't Kansas anymore
        # Elegant solution from here: https://superuser.com/a/443862/136571
        local the_dirname=${PWD%/*}/
        local the_cwd=${PWD##*/}

        # Default colors
        local dirname_color='{{ colors.path_fg }}'
        local the_cwd_color='{{ colors.path_cwd_fg }}'

        # Replace home path part with the nice little house™
        if [[ "$the_dirname" == "$HOME"* ]]; then
            the_dirname="{{ symbol.home }} ${the_dirname##*$HOME/}"
            # Define homeish colors
            #local dirname_color='{{ colors.path_home_fg }}'
            #local the_cwd_color='{{ colors.path_home_fg }}'

        # Does the same for `/tmp` with a fancy trash can
        elif [[ "$the_dirname" == "/tmp/"* ]]; then
            the_dirname="{{ symbol.tmp }} ${the_dirname##*/tmp/}"
            # Define cyanish colors
            local dirname_color='{{ colors.path_tmp_fg }}'
            local the_cwd_color='{{ colors.path_tmp_fg }}'
        fi

        # Used to get current path length
        local pwd_length="$the_dirname $the_cwd"

        # Truncate path if it exceeds maximum length
        if [[ ${#pwd_length} -gt $max_path_length ]]; then
            if [[ ${#the_cwd} -gt $max_path_length ]]; then
                the_dirname='' # It could be '…/', but doesn't look good
                the_cwd="…${the_cwd:(-$max_path_length)}"
            else
                local tmpstr=''
                local new_dirname=''
                local tmp_prefix=''

                # Save the nice little house™ for later if it is there
                if [[ "$the_dirname" == "{{ symbol.home }} "* || "$the_dirname" == "{{ symbol.tmp }} "* ]]; then
                    tmp_prefix=${the_dirname::2}
                    the_dirname=${the_dirname##*$tmp_prefix}
                fi

                # Remove trailing slash so the following loop works as expected
                the_dirname=${the_dirname%/}

                # Reset max. path length to remaining chars (minus one to account for …/)
                max_path_length=$(($max_path_length - ${#the_cwd} - 1 - ${#tmp_prefix} ))

                # Process path upwards until its done
                while [[ -n "$the_dirname" ]]; do
                    # Get nearest directory name
                    tmpstr="${the_dirname##*/}"

                    # Truncate if tmpstr exceeds max. length
                    if [ ${#tmpstr} -ge $(($max_path_length - ${#new_dirname})) ]; then
                        new_dirname="…/${new_dirname}"
                        # Alternative: truncate tmpstr where it reaches max_path_length
                        #new_dirname="…${tmpstr:(-$((max_path_length - 2)))}/${new_dirname}"

                        # Alternative: break here, instead of continuing up the tree,
                        #              which may have smaller names that still fit
                        break
                    else
                        # It fits, just prepend it
                        new_dirname="${tmpstr}/${new_dirname}"
                    fi

                    # If path length already maxed, break the loop
                    if [[ ${#new_dirname} -gt ${max_path_length} ]]; then
                        break
                    fi

                    # Remove last directory
                    the_dirname=${the_dirname%/*}
                done
                # Assign removing trailing slash
                the_dirname=${tmp_prefix}${new_dirname}
            fi
        fi


        # Light color, print dirname
        path_block_string+="${dirname_color}$the_dirname"
        # Strong color, bold, print current directory, reset bold, re-define bg color
        path_block_string+="${the_cwd_color}\[\e[1m\]$the_cwd\[\e[0m\]{{ colors.path_bg }} "

        used_chars=$(( $used_chars + ${#the_dirname} + ${#the_cwd} ))
    fi

    ###############
    # Git block ##
    #############

    if [ ${inside_repo} -ne 0 ]; then

        # A cool arrow is returned
        PS1+="${path_block_string}\[\e[0m\]{{ fg(colors.path_bg) }}"

    else

        local modifiers=''
        local bgcolor=''
        local fgcolor='\[\e[38;5;0m\]' # Black
        local icon='{{ symbol.git.branch }}'

        local top_level_path=$(git rev-parse --show-toplevel)

        if [[ $(git status --porcelain) ]]; then
            bgcolor='\[\e[43m\]' # Yellow

            # Check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
              modifiers="$modifiers {{ symbol.git.staged }}";
            fi

            # Check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                modifiers="$modifiers {{ symbol.git.modified }}";
            fi

            # Check for untracked files
            if [ -n "$(git ls-files ${top_level_path} --others --exclude-standard)" ]; then
                modifiers="$modifiers {{ symbol.git.untracked }}";
            fi

        else # No changes
            bgcolor='\[\e[42m\]' # Green
        fi

        # Try to guess branch status; `origin` is hardcoded because it works for me 99% of the time
        git diff origin/${branchName}..${branchName} --quiet --exit-code 2>/dev/null
        case $? in
            1) # Branch has unpushed commits
                modifiers=" {{ symbol.git.unpushed }}$modifiers";
                ;;

            128) # Error, asume we are in a new branch (not present in origin)
                icon="{{ symbol.git.new_branch }}";
                ;;
        esac


        # Check if we are in the middle of a rebase
        if test -d "${top_level_path}/.git/rebase-merge" -o -d "${top_level_path}/.git/rebase-apply"; then
            icon='{{ symbol.git.rebase }}'
            bgcolor='\[\e[41m\]' # Red
            fgcolor='\[\e[97m\]' # White
        fi

        local bgcolor_for_fg=${bgcolor/[4/[3}
        PS1+="${path_block_string}\[\e[0m\]${bgcolor}{{ fg(colors.path_bg) }} "
        PS1+="${fgcolor}${icon} ${branchName}\[\e[0m\]${bgcolor}${fgcolor}${modifiers} \[\e[0m\]${bgcolor_for_fg}"

    fi

    # After some research, 80% of the commands I type are below 28 chars
    if [ ${used_chars} -gt $(( $cols - 28 )) ]; then
        PS1+="\n{{ colors.arrow_fg }}{{ strings.prompt }}"
    fi

    # Reset after whatever came out before this, and add a space
    PS1+="\[\e[0m\] "

}

{~ time_for_long_commands ~}
format_small_time() {
    local _time=$1
    local _out
    local days=$(( _time / 60 / 60 / 24 ))
    local hours=$(( _time / 60 / 60 % 24 ))
    local minutes=$(( _time / 60 % 60 ))
    local seconds=$(( _time % 60 ))
    (( days > 0 )) && _out=" ${days}d"
    (( hours > 0 )) && _out="$_out ${hours}h"
    (( minutes > 0 )) && _out=" $_out ${minutes}m"
    _out="$_out ${seconds}s"
    printf "%s" "$_out"
}

start_prompt_timer() {
    # do nothing if completing
    [ -n "$COMP_LINE" ] && return

    # don't cause a preexec for $PROMPT_COMMAND
    [ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return

    PROMPT_START_TIME=$(date +'%s')
}
{~ /time_for_long_commands ~}

set_prompts() {
    # The PS1 prompt is generated by a function
    export PROMPT_COMMAND='completely_dynamic_prompt'

    # This is what is shown when the interactive prompt appears in a new line
    PS2='{{ strings.custom_PS2 }}'
    export PS2


    # And this is the debug prompt, which you may see running something with `bash -x`
    PS4="+$( tput cr && tput cuf 6 && printf "%s $reset" )"
    export PS4
}

# Color theme
# ToDo: make this path more flexible
[[ -s "$HOME/dotfiles/art/colors/{{ strings.palette }}.sh" ]] &&
    source "$HOME/dotfiles/art/colors/{{ strings.palette }}.sh"

{~ time_for_long_commands ~}
trap 'start_prompt_timer' DEBUG
{~ /time_for_long_commands ~}
set_prompts


# Unset anything that just pollutes the global space
unset -f set_prompts

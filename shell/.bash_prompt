#!/bin/bash

# Dear future me or whoever is wishing to modify the prompt:
#
# I'm so, so sorry. For a blisful moment I looked at escaped codes for colors
# and actually *saw* the colors, as if the script were licking my eyeballs with
# a sparkling rainbow and drowning me in a bucket full of joy.

complete_prompt_with_git() {
    local branchName=''
    local modifiers=''
    local bgcolor=''
    local fgcolor='\e[38;5;0m' # Black
    local icon=''

    if [[
    # Check if the current directory is in a Git repository
    ("$(git rev-parse &>/dev/null; printf $?)" -ne 0) ||
    # Check if in `.git/` directory (some of the following
    # checks don't make sense/won't work in the `.git` directory)
    ("$(git rev-parse --is-inside-git-dir)" == "true")
    ]]; then
        # A cool arrow is returned
        echo -e "\e[0m\e[38;5;234m\e[1;37m "
        return
    fi

    branchName="$( printf "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unknown)" )" | tr -d "\n" )"

    if [[ $(git status --porcelain) ]]; then
        bgcolor='\e[43m' # Yellow

        # Check for uncommitted changes in the index
        if ! $(git diff --quiet --ignore-submodules --cached); then
          modifiers="$modifiers ";
        fi

        # Check for unstaged changes
        if ! $(git diff-files --quiet --ignore-submodules --); then
            modifiers="$modifiers ±";
        fi

        # Check for untracked files
        if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            modifiers="$modifiers ";
        fi

    else # No changes
        bgcolor='\e[42m' # Green
    fi

    # Try to guess branch status; `origin` is hardcoded because it works for me 99% of the time
    git diff origin/${branchName}..${branchName} --quiet --exit-code 2>/dev/null
    case $? in
        1) # Branch has unpushed commits
            modifiers=" $modifiers";
            ;;

        128) # Error, asume we are in a new branch (not present in origin)
            icon="";
            ;;
    esac


    # Check if we are in the middle of a rebase
    local top_level_path=$(git rev-parse --show-toplevel)
    if test -d "${top_level_path}/.git/rebase-merge" -o -d "${top_level_path}/.git/rebase-apply"; then
        icon=''
        bgcolor='\e[41m' # Red
        fgcolor='\e[97m' # White
    fi

    local bgcolor_for_fg=${bgcolor/[4/[3}
    echo -e "${bgcolor}\e[38;5;234m ${fgcolor}${icon} ${branchName}${modifiers} \e[0m${bgcolor_for_fg}"

}

set_prompts() {
    # Set terminal title to cwd
    PS1="\[\033]0;\w\007\]"
    # Reset bold, reset, set username background color
    PS1+="\[\e[0m\]\[\e[48;5;237m\]"
    # Set username color, which will later be overriden if no SSH connection
    PS1+="\[\e[38;5;256m\]"
    # Show user icon only if not going through a SSH connection
    # because I don't want my prompt to be an emoji parade
    [ -z "$SSH_CONNECTION" ] && PS1+="\[\e[38;5;240m\]  \[\e[38;5;244m\]"
    # Print username
    PS1+="\u "
    # Show hostname only when connected through SSH
    if [ -n "$SSH_CONNECTION" ]; then
        # Set color, print symbol, set bold, print hostname
        PS1+="\[\e[34m\] \[\e[1m\]\h "
    fi
    # Reset, set color, set background color for path, print closing section
    PS1+="\[\e[0m\]\[\e[38;5;237m\]\[\e[48;5;234m\] "
    # Set color, print path
    PS1+="\[\e[1;35m\]\w "
    # Dark magic. The slash before the $() is important to defer execution!
    PS1+="\$(complete_prompt_with_git)"
    # Reset after whatever came out of the previous command, and add a space
    PS1+="\[\e[0m\] "

    # You made it!
    export PS1


    # This is what is shown when the interactive prompt appears in a new line
    PS2='  '
    export PS2


    # And this is the debug prompt, which you may see running something with `bash -x`
    PS4="+$( tput cr && tput cuf 6 && printf "%s $reset" )"
    export PS4
}

main() {
    # Color theme
    source ~/dotfiles/art/colors/base16-bespin.dark.sh
    set_prompts
}

main

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Unset anything that just pollutes the global space

unset -f enable_color_support
unset -f main
unset -f set_ls_colors
unset -f set_prompts

#!/bin/bash

get_git_repository_details() {
    local branchName=''
    local tmp=''

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if the current directory is in a Git repository
    [ "$(git rev-parse &>/dev/null; printf $?)" -ne 0 ] && return

    # Check if in `.git/` directory (some of the following
    # checks don't make sense/won't work in the `.git` directory)
    [ "$(git rev-parse --is-inside-git-dir)" == "true" ] && return

    # Check for uncommitted changes in the index
    # if ! $(git diff --quiet --ignore-submodules --cached); then
        # tmp="$tmp";
    # fi

    # # Check for unstaged changes
    # if ! $(git diff-files --quiet --ignore-submodules --); then
        # tmp="$tmp";
    # fi

    # # Check for untracked files
    # if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        # tmp="$tmp?";
    # fi

    # # Check for stashed files
    # if $(git rev-parse --verify refs/stash &>/dev/null); then
        # tmp="$tmp$";
    # fi

    # [ -n "$tmp" ] && tmp=" [$tmp]"


    branchName="$( printf "$( git rev-parse --abbrev-ref HEAD 2> /dev/null \
        || git rev-parse --short HEAD 2> /dev/null \
        || printf " (unknown)" )" | tr -d "\n" )"


    printf "%s" "$1$branchName$tmp"
}

set_prompts() {
    local black='' blue='' bold='' cyan='' green='' orange='' \
          purple='' red='' reset='' white='' yellow=''

    bold=''
    reset="\e[0m"

    black="\e[1;30m"
    blue="\e[1;34m"
    cyan="\e[1;36m"
    green="\e[1;32m"
    orange="\e[1;33m"
    purple="\e[1;35m"
    red="\e[1;31m"
    white="\e[1;37m"
    yellow="\e[1;33m"

    PS1="\[\033]0;\w\007\]"         # Terminal title (set to the
                                    # current working directory)

    PS1+="\[\033[48;5;8m\]"
    PS1+="\[$white\]\u"
    PS1+="\[$white\]@"
    PS1+="\h"
    PS1+="\[$reset\]\[\033[38;5;8m\] "
    PS1+="\[$purple\]\w"
    PS1+="\$(get_git_repository_details \"$gray on  $blue\")"
    # PS1+="\n"
    PS1+="\[$reset$white\]  \[$reset\]"

    export PS1

    # ------------------------------------------------------------------
    # | PS2 - Continuation interactive prompt                          |
    # ------------------------------------------------------------------

    PS2=' '

    export PS2

    # ------------------------------------------------------------------
    # | PS4 - Debug prompt                                             |
    # ------------------------------------------------------------------

    # e.g:
    #
    # The GNU `date` command has the `%N` interpreted sequence while
    # other implementations don't.
    #
    # local dateCmd=""
    #
    # if [ "$(date +%N)" != "N" ] || \
    #    [ ! -x "$(command -v 'gdate')" ]; then
    #    dateCmd="date +%s.%N"
    # else
    #    dateCmd="gdate +%s.%N"
    # fi
    #
    # PS4="+$( tput cr && tput cuf 6 &&
    #          printf "$yellow %s $green%6s $reset" "$($dateCmd)" "[$LINENO]" )"
    #
    # PS4 output:
    #
    #   ++    1357074705.875970000  [123] '[' 1 == 0 ']'
    #   └──┬─┘└────┬───┘ └───┬───┘ └──┬─┘ └──────┬─────┘
    #      │       │         │        │          │
    #      │       │         │        │          └─ command
    #      │       │         │        └─ line number
    #      │       │         └─ nanoseconds
    #      │       └─ seconds since 1970-01-01 00:00:00 UTC
    #      └─ depth-level of the subshell

    PS4="+$( tput cr && tput cuf 6 && printf "%s $reset" )"

    export PS4
}

main() {
    # Color theme
    source ~/dotfiles/art/colors/base16-bespin.dark.sh
    set_prompts
}

main

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Unset anything that just pollutes the global space

unset -f enable_color_support
unset -f main
unset -f set_ls_colors
unset -f set_prompts
